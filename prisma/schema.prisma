generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

/// Discord user model according to https://discord.com/developers/docs/resources/user
model DiscordAccount {
  id                String                     @id @unique
  username          String                     @db.VarChar(32)
  discriminator     String                     @db.VarChar(4)
  global_name       String?                    @db.VarChar(32)
  avatar            String?
  avatar_decoration String?
  email             String?                    @db.VarChar(254)
  verified          Boolean?
  accent_color      Int?
  banner            String?
  bot               Boolean?
  flags             BigInt?
  locale            String?                    @default("en-US") @db.VarChar(6)
  mfa_enabled       Boolean?
  premium_type      Int?                       @db.SmallInt
  public_flags      BigInt?
  system            Boolean?
  phone             String?                    @db.VarChar(32)
  nsfw_allowed      Boolean?
  bio               String?                    @db.VarChar(190)
  banner_color      String?
  // Additional fields
  /// A password to be used for logging in to the account
  password          String?                    @db.VarChar(256)
  /// A number between 0 and 100 representing the account's trustworthiness
  rating            Int?                       @db.SmallInt
  /// Custom notes about the account
  notes             String?                    @db.VarChar(1024)
  tokens            DiscordToken[]
  owner             User?                      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String?
  collections       DiscordAccountCollection[]
  /// A list of all changes that have been made to the account
  history           DiscordAccountHistory[]
  createdAt         DateTime                   @default(now())

  @@index([username])
}

/// Track changes in DiscordAccount model
model DiscordAccountHistory {
  id               String         @id @default(cuid())
  data             Json           @db.JsonB
  discordAccount   DiscordAccount @relation(fields: [discordAccountId], references: [id], onDelete: Cascade)
  discordAccountId String
  changedAt        DateTime       @default(now())
}

/// Group DiscordAccounts into collections
model DiscordAccountCollection {
  id        String           @id @default(cuid())
  name      String           @db.VarChar(32)
  accounts  DiscordAccount[]
  owner     User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model DiscordToken {
  id               String         @id @default(cuid())
  discordAccountId String
  value            String         @unique
  origin           String?        @db.VarChar(64)
  discordAccount   DiscordAccount @relation(fields: [discordAccountId], references: [id], onDelete: Cascade)
  lastCheckedAt    DateTime       @default(now())
  createdAt        DateTime       @default(now())
}

/// Keeps track of all events that are sent by the Sellix API
model SellixEvent {
  id    String @id @default(cuid())
  event String
  data  Json
}

/// Stores the API keys for users to use our API
model ApiKey {
  id         String    @id @default(cuid())
  name       String    @db.VarChar(32)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  value      String    @unique @db.VarChar(256)
  /// Defines the allowed origins for this API key
  allowedIps String[]  @db.VarChar(64)
  /// Defines the allowed requests per minute for this API key
  rateLimit  Int       @default(10) @db.SmallInt
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String?                    @unique
  emailVerified             DateTime?
  image                     String?
  role                      Role                       @default(CUSTOMER)
  /// Whether the users public profile is visible to others
  publicProfile             Boolean                    @default(true)
  /// Whether the users name and image will be redacted from public statistics
  publicAnonymous           Boolean                    @default(false)
  accounts                  Account[]
  sessions                  Session[]
  discordAccounts           DiscordAccount[]
  discordAccountCollections DiscordAccountCollection[]
  apiKeys                   ApiKey[]
  subscribedTill            DateTime?
  createdAt                 DateTime                   @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
